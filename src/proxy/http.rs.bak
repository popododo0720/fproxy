use std::error::Error;
use std::sync::Arc;
use std::io;
use std::time::{Instant, Duration};
use std::error::Error;

use log::{debug, error, info, warn};
use tokio::net::TcpStream;
use tokio::io::{AsyncReadExt, AsyncWriteExt};
use bytes::{BytesMut, BufMut};
use base64;

use crate::metrics::Metrics;
use crate::constants::*;
use crate::config::Config;
use crate::logging::{Logger, LogFormatter};

/// HTTP 헤더 끝 찾기
fn find_header_end(buf: &[u8]) -> Option<usize> {
    for i in 0..buf.len().saturating_sub(3) {
        if buf[i] == b'\r' && buf[i+1] == b'\n' && buf[i+2] == b'\r' && buf[i+3] == b'\n' {
            return Some(i);
        }
    }
    None
}

/// HTTP chunked 응답 종료 확인
fn find_chunk_end(buf: &[u8]) -> bool {
    // 마지막 청크 패턴: "\r\n0\r\n\r\n"
    let pattern = b"\r\n0\r\n\r\n";
    
    // 버퍼의 마지막 부분만 검사 (효율성을 위해)
    let start_pos = buf.len().saturating_sub(100);
    let slice_to_check = &buf[start_pos..];
    
    for i in 0..slice_to_check.len().saturating_sub(pattern.len() - 1) {
        let mut found = true;
        for j in 0..pattern.len() {
            if i + j >= slice_to_check.len() || slice_to_check[i + j] != pattern[j] {
                found = false;
                break;
            }
        }
        if found {
            return true;
        }
    }
    
    // 또는 단순히 끝나는 패턴을 직접 확인
    let end = buf.len().saturating_sub(5);
    end >= 5 && &buf[end..] == b"0\r\n\r\n"
}

/// HTTP 요청의 기본 정보를 파싱하는 함수
/// 메서드, 경로, 호스트, 헤더 종료 위치를 반환
fn parse_http_request_basic(request: &str) -> (Option<&str>, Option<&str>, Option<&str>, Option<usize>) {
    let mut method = None;
    let mut path = None;
    let mut host = None;
    let mut header_end = None;
    
    // 헤더 종료 위치 찾기
    if let Some(end) = request.find("\r\n\r\n") {
        header_end = Some(end);
    }
    
    // 첫 줄 파싱
    if let Some(first_line_end) = request.find("\r\n") {
        let first_line = &request[..first_line_end];
        let parts: Vec<&str> = first_line.split_whitespace().collect();
        
        if parts.len() >= 2 {
            method = Some(parts[0]);
            path = Some(parts[1]);
        }
    }
    
    // 호스트 헤더 찾기
    for line in request.lines() {
        if line.to_lowercase().starts_with("host:") {
            host = Some(line.trim_start_matches("Host:").trim_start_matches("host:").trim());
            break;
        }
    }
    
    (method, path, host, header_end)
}

/// 간소화된 HTTP 프록시 함수
pub async fn proxy_http_streams(
    mut client_stream: TcpStream,
    mut server_stream: TcpStream,
    metrics: Arc<Metrics>,
    session_id: &str,
    request_start_time: Instant,
    config: Option<Arc<Config>>,
    initial_request: Option<Vec<u8>>,
    already_logged: bool,
    logger: Option<Arc<Logger>>,
) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    // 세션 ID를 문자열로 복제하여 일관된 사용 보장
    let session_id_str = session_id.to_string();
    
    // 클라이언트 및 서버 IP 주소 가져오기
    let client_ip = client_stream.peer_addr()
        .map(|addr| addr.ip().to_string())
        .unwrap_or_else(|_| "Unknown IP".to_string());
    
    let server_ip = server_stream.peer_addr()
        .map(|addr| addr.ip().to_string())
        .unwrap_or_else(|_| "Unknown IP".to_string());
    
    // 타임아웃 설정
    let timeout_ms = if let Some(cfg) = &config {
        cfg.timeout_ms as u64
    } else {
        60000 // 기본값 60초
    };
    
    info!("[Session:{}] HTTP 프록시 시작 - 간소화 모드", session_id_str);
    
    // 버퍼 초기화
    let mut client_buf = BytesMut::with_capacity(BUFFER_SIZE_MEDIUM);
    
    // 초기 요청 데이터가 있으면 클라이언트 버퍼에 추가
    if let Some(initial_data) = initial_request {
        if !initial_data.is_empty() {
            client_buf.put_slice(&initial_data);
            info!("[Session:{}] 초기 요청 데이터 {} 바이트 사용", session_id_str, initial_data.len());
        }
    }
    
    // 초기 데이터가 없거나 추가 데이터가 필요한 경우에만 클라이언트로부터 요청을 읽음
    let mut total_bytes_in = client_buf.len();
    
    if total_bytes_in == 0 {
        // 초기 요청 데이터가 없는 경우에만 클라이언트에서 직접 읽음
        let mut buf = BytesMut::with_capacity(8192);
        match tokio::time::timeout(
            Duration::from_millis(timeout_ms),
            client_stream.read_buf(&mut buf)
        ).await {
            Ok(Ok(0)) => {
                info!("[Session:{}] 클라이언트 연결 종료됨", session_id_str);
                return Ok(());
            },
            Ok(Ok(n)) => {
                total_bytes_in += n;
                metrics.add_http_bytes_in(n as u64);
                client_buf.put_slice(&buf[..n]);
                debug!("[Session:{}] 클라이언트에서 {} 바이트 읽음", session_id_str, n);
            },
            Ok(Err(e)) => {
                error!("[Session:{}] 클라이언트 읽기 오류: {}", session_id_str, e);
                return Err(e.into());
            },
            Err(_) => {
                error!("[Session:{}] 클라이언트 읽기 타임아웃", session_id_str);
                return Err(io::Error::new(io::ErrorKind::TimedOut, "클라이언트 읽기 타임아웃").into());
            }
        }
    }
    
    if client_buf.is_empty() {
        info!("[Session:{}] 클라이언트로부터 데이터를 받지 못함", session_id_str);
        return Ok(());
    }
    
    info!("[Session:{}] 클라이언트 요청 {} 바이트 수신 완료", session_id_str, client_buf.len());
    
    // 요청 로깅
    if !already_logged && logger.is_some() {
        // 이미 로깅된 요청이 아닌 경우만 로깅 수행
        if let Some(logger) = &logger {
            // 요청 내용을 문자열로 변환 (헤더 부분만)
            let request_text = if let Ok(text) = std::str::from_utf8(&client_buf) {
                text.to_owned()
            } else {
                // 유효한 UTF-8이 아닌 경우 부분 변환 시도
                String::from_utf8_lossy(&client_buf).into_owned()
            };
            
            // 메서드와 경로 추출
            let (method, path, host_opt, header_end) = parse_http_request_basic(&request_text);
            
            let method = method.unwrap_or("UNKNOWN").to_string();
            let path = path.unwrap_or("/").to_string();
            let host = host_opt.unwrap_or("unknown.host").to_string();
            
            // 헤더만 추출
            let headers = request_text.split("\r\n\r\n").next().unwrap_or("");
            
            // 본문 추출 (있는 경우)
            let body = if let Some(end) = header_end {
                if end + 4 < request_text.len() {
                    Some(request_text[end + 4..].to_string())
                } else {
                    None
                }
            } else {
                None
            };
            
            // 요청 로그 저장
            if let Err(e) = logger.log_request(
                host.to_string(),
                method.to_string(),
                path.to_string(),
                headers.to_string(),
                body.clone(),
                session_id_str.clone(),
                client_ip.clone(),
                server_ip.clone(),
                false, // 차단되지 않음
                false  // HTTP 요청
            ).await {
                warn!("[Session:{}] 요청 로깅 실패: {}", session_id_str, e);
            } else {
                debug!("[Session:{}] 요청 로깅 성공", session_id_str);
            }
        }
    }
    
    // 서버에 요청 전송
    match tokio::time::timeout(
        Duration::from_millis(timeout_ms),
        server_stream.write_all(&client_buf)
    ).await {
        Ok(Ok(_)) => {
            metrics.add_http_bytes_out(client_buf.len() as u64);
            debug!("[Session:{}] 서버로 {} 바이트 전송 완료", session_id_str, client_buf.len());
        },
        Ok(Err(e)) => {
            error!("[Session:{}] 서버 쓰기 오류: {}", session_id_str, e);
            return Err(e.into());
        },
        Err(_) => {
            error!("[Session:{}] 서버 쓰기 타임아웃", session_id_str);
            return Err(io::Error::new(io::ErrorKind::TimedOut, "서버 쓰기 타임아웃").into());
        }
    }
    
    // 서버로부터 응답 수신
    let mut server_buf = BytesMut::with_capacity(BUFFER_SIZE_MEDIUM);
    let mut header_end_pos = None;
    let mut is_chunked = false;
    let mut content_length = None;
    let mut status_code = 200;
    let mut total_bytes_out = 0;
    let mut _is_complete = false;
    
    loop {
        let mut buf = BytesMut::with_capacity(8192);
        
        match tokio::time::timeout(
            Duration::from_millis(timeout_ms),
            server_stream.read_buf(&mut buf)
        ).await {
            Ok(Ok(0)) => {
                // 서버가 연결을 종료함
                _is_complete = true;
                break;
            },
            Ok(Ok(n)) => {
                metrics.add_http_bytes_in(n as u64);
                server_buf.put_slice(&buf[..n]);
                total_bytes_out += n;
                
                // 헤더 끝 위치를 아직 찾지 못했다면 찾기
                if header_end_pos.is_none() {
                    header_end_pos = find_header_end(&server_buf);
                    
                    if let Some(pos) = header_end_pos {
                        // 헤더 부분만 UTF-8로 변환
                        if let Ok(headers) = std::str::from_utf8(&server_buf[..pos]) {
                            // 응답 상태 코드 추출
                            if let Some(status_line) = headers.lines().next() {
                                if let Some(code_str) = status_line.split_whitespace().nth(1) {
                                    if let Ok(code) = code_str.parse::<u16>() {
                                        status_code = code;
                                    }
                                }
                            }
                            
                            // Transfer-Encoding: chunked 확인
                            is_chunked = headers.to_lowercase().contains("transfer-encoding: chunked");
                            
                            // Content-Length 확인
                            if !is_chunked {
                                for line in headers.lines() {
                                    if line.to_lowercase().starts_with("content-length:") {
                                        if let Some(len_str) = line.split(':').nth(1) {
                                            if let Ok(len) = len_str.trim().parse::<usize>() {
                                                content_length = Some(len);
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
                // 응답 완료 여부 확인
                if let Some(pos) = header_end_pos {
                    if is_chunked {
                        // chunked 인코딩인 경우 끝 청크 확인
                        if find_chunk_end(&server_buf) {
                            _is_complete = true;
                            break;
                        }
                    } else if let Some(len) = content_length {
                        // Content-Length가 있는 경우 길이 확인
                        if server_buf.len() >= pos + 4 + len {
                            _is_complete = true;
                            break;
                        }
                    }
                }
                
                // 클라이언트에 응답 전송
                match client_stream.write_all(&buf[..n]).await {
                    Ok(_) => {
                        metrics.add_http_bytes_out(n as u64);
                        debug!("[Session:{}] 클라이언트로 {} 바이트 전송", session_id_str, n);
                    },
                    Err(e) => {
                        error!("[Session:{}] 클라이언트 쓰기 오류: {}", session_id_str, e);
                        return Err(e.into());
                    }
                }
            },
            Ok(Err(e)) => {
                error!("[Session:{}] 서버 읽기 오류: {}", session_id_str, e);
                return Err(e.into());
            },
            Err(_) => {
                // 타임아웃은 정상 종료로 처리 (일부 서버는 연결을 명시적으로 닫지 않음)
                warn!("[Session:{}] 서버 읽기 타임아웃, 정상 종료로 처리", session_id_str);
                _is_complete = true;
                break;
            }
        }
    }
    
    // 응답 시간 계산
    let response_time = request_start_time.elapsed().as_millis() as u64;
    
    // 응답 로깅
    if let Some(logger) = &logger {
            // 헤더 추출
            let headers = if let Some(pos) = header_end_pos {
                if let Ok(headers_text) = std::str::from_utf8(&server_buf[..pos]) {
                    headers_text.to_string()
                } else {
                    String::from_utf8_lossy(&server_buf[..pos]).into_owned()
                }
            } else {
                // 헤더 끝을 찾지 못한 경우 전체 버퍼를 사용
                String::from_utf8_lossy(&server_buf).into_owned()
            };
            
            // 응답 본문 미리보기 (최대 1KB)
            let body_preview = if let Some(pos) = header_end_pos {
                if server_buf.len() > pos + 4 {
                    let preview_end = std::cmp::min(pos + 4 + 1024, server_buf.len());
                    let body_slice = &server_buf[pos + 4..preview_end];
                    
                    if let Ok(body_text) = std::str::from_utf8(body_slice) {
                        Some(LogFormatter::summarize_body(body_text, 1024))
                    } else {
                        // 바이너리 데이터를 base64로 인코딩하여 표시
                        let base64_data = base64::encode(body_slice);
                        Some(format!("Base64 인코딩 데이터: {}", LogFormatter::summarize_body(&base64_data, 1024)))
                    }
                } else {
                    None
                }
            } else {
                None
            };
            
            // 응답 로그 저장
            if let Err(e) = logger.log_response(
                session_id_str.clone(),
        } else {
            String::from_utf8_lossy(&server_buf[..pos]).into_owned()
        }
    } else {
        // 헤더 끝을 찾지 못한 경우 전체 버퍼를 사용
        String::from_utf8_lossy(&server_buf).into_owned()
    };

    // 응답 본문 미리보기 (최대 1KB)
    let body_preview = if let Some(pos) = header_end_pos {
        if server_buf.len() > pos + 4 {
            let preview_end = std::cmp::min(pos + 4 + 1024, server_buf.len());
            let body_slice = &server_buf[pos + 4..preview_end];

            if let Ok(body_text) = std::str::from_utf8(body_slice) {
                Some(LogFormatter::summarize_body(body_text, 1024))
            } else {
                // 바이너리 데이터를 base64로 인코딩하여 표시
                let base64_data = base64::encode(body_slice);
                Some(format!("Base64 인코딩 데이터: {}", LogFormatter::summarize_body(&base64_data, 1024)))
            }
        } else {
            None
        }
    } else {
        None
    };

    // 응답 로그 저장
    if let Err(e) = logger.log_response(
        session_id_str.clone(),
        status_code,
        response_time,
        total_bytes_out,
        headers,
        body_preview
    ).await {
        warn!("[Session:{}] 응답 로깅 실패: {}", session_id_str, e);
    } else {
        debug!("[Session:{}] 응답 로깅 성공: {} ms, {} bytes", 
            session_id_str, response_time, total_bytes_out);
    }
} else {
    debug!("[Session:{}] Logger 읽기 락 획득 실패", session_id_str);
}

info!("[Session:{}] HTTP 프록시 완료: {} ms, {} bytes in, {} bytes out", 
    session_id_str, response_time, total_bytes_in, total_bytes_out);

Ok(())
} 