use std::error::Error;
use std::sync::Arc;
use std::io;
use std::time::Instant;
use std::collections::HashMap;
use std::sync::RwLock;

use log::{debug, error, info, warn};
use tokio::net::TcpStream;
use tokio::io::{AsyncReadExt, AsyncWriteExt};
use bytes::{BytesMut, BufMut};
use tokio_rustls::client::TlsStream as ClientTlsStream;
use tokio_rustls::server::TlsStream as ServerTlsStream;
use httparse;
use memmem::{Searcher, TwoWaySearcher};
use base64;

use crate::metrics::Metrics;
use crate::constants;
use crate::config::Config;
use crate::logging::{Logger, LogFormatter};

// 패턴 상수 정의 - 전역으로 이동하여 매번 생성하지 않도록 함
const HEADER_END_PATTERN: &[u8] = b"\r\n\r\n";
const CHUNK_END_PATTERN: &[u8] = b"\r\n0\r\n\r\n";

// HTTP 요청 메서드 집합
const HTTP_METHODS: [&str; 6] = ["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS"];

/// HTTP 요청 정보 파싱하여 헤더와 바디 추출
fn parse_http_request<'a>(buffer: &'a [u8], header_searcher: &TwoWaySearcher) -> (Option<&'a str>, Option<&'a str>, String, Option<String>) {
    let mut headers = [httparse::EMPTY_HEADER; 64];
    let mut req = httparse::Request::new(&mut headers);
    
    if let Ok(status) = req.parse(buffer) {
        if status.is_partial() || status.is_complete() {
            let method = req.method;
            let path = req.path;
            
            // 헤더 추출
            let mut header_str = String::new();
            for header in headers.iter() {
                if header.name.is_empty() {
                    break;
                }
                if !header_str.is_empty() {
                    header_str.push_str("\r\n");
                }
                if let Ok(value) = std::str::from_utf8(header.value) {
                    header_str.push_str(&format!("{}: {}", header.name, value));
                }
            }
            
            // 본문 추출 시도
            let mut body = None;
            if let Some(header_end_pos) = header_searcher.search_in(buffer) {
                let body_start = header_end_pos + 4; // "\r\n\r\n" 길이
                if body_start < buffer.len() {
                    if let Ok(body_str) = std::str::from_utf8(&buffer[body_start..]) {
                        body = Some(body_str.to_string());
                    }
                }
            }
            
            return (method, path, header_str, body);
        }
    }
    
    (None, None, String::new(), None)
}

/// 응답의 완료 여부 확인
fn is_response_complete(
    resp_bytes: &[u8], 
    headers_end_pos: usize, 
    chunk_searcher: &TwoWaySearcher
) -> (bool, Option<usize>, bool) {
    // 헤더 파싱
    let mut headers = [httparse::EMPTY_HEADER; 64];
    let mut resp = httparse::Response::new(&mut headers);
    
    if let Ok(_) = resp.parse(&resp_bytes[..headers_end_pos]) {
        // Content-Length 또는 Transfer-Encoding 찾기
        let mut content_length = None;
        let mut is_chunked = false;
        
        for header in headers.iter() {
            if header.name.is_empty() {
                break;
            }
            
            if header.name.eq_ignore_ascii_case("content-length") {
                if let Ok(len_str) = std::str::from_utf8(header.value) {
                    if let Ok(len) = len_str.trim().parse::<usize>() {
                        content_length = Some(len);
                    }
                }
            } else if header.name.eq_ignore_ascii_case("transfer-encoding") {
                if let Ok(value) = std::str::from_utf8(header.value) {
                    is_chunked = value.to_lowercase().contains("chunked");
                }
            }
        }
        
        // 응답 완료 확인
        if is_chunked {
            // chunked 인코딩의 경우 마지막 청크 패턴 확인
            let is_complete = chunk_searcher.search_in(resp_bytes).is_some();
            return (is_complete, None, true);
        } else if let Some(len) = content_length {
            // Content-Length가 있는 경우, 헤더 끝 이후의 본문 길이 확인
            let body_length = resp_bytes.len() - headers_end_pos;
            return (body_length >= len, Some(len), false);
        } else {
            // Content-Length도 없고 chunked도 아닌 경우, 헤더 수신 후 즉시 응답 완료로 처리
            return (true, None, false);
        }
    }
    
    (false, None, false)
}

/// TLS 스트림 간에 데이터를 전달하고 검사합니다
pub async fn proxy_tls_streams(
    client_stream: ServerTlsStream<TcpStream>,
    server_stream: ClientTlsStream<TcpStream>,
    metrics: Arc<Metrics>,
    session_id: &str,
    host: &str,
    request_start_time: Instant,
    logger: Option<Arc<Logger>>,
    config: Option<Arc<Config>>,
) -> Result<(), Box<dyn Error + Send + Sync>> {
    // 클라이언트 IP 주소 가져오기 (스트림 분할 전에)
    let client_ip = client_stream.get_ref().0.peer_addr()
        .map(|addr| addr.ip().to_string())
        .unwrap_or_else(|_| "Unknown IP".to_string());
    
    // 서버 IP 주소 가져오기
    let server_ip = server_stream.get_ref().0.peer_addr()
        .map(|addr| addr.ip().to_string())
        .unwrap_or_else(|_| "Unknown IP".to_string());
    
    // 연결된 IP 주소 로깅
    info!("[Session:{}] Connected to IP: {} for host: {}, client IP: {}", 
         session_id, server_ip, host, client_ip);
    
    // 양방향 데이터 전송 및 검사 로직 구현
    let (mut client_read, mut client_write) = tokio::io::split(client_stream);
    
    let client_ip_clone = client_ip.clone();
    let server_ip_clone = server_ip.clone();
        
    let (mut server_read, mut server_write) = tokio::io::split(server_stream);
    
    // 개별 요청 시작 시간 추적을 위한 HashMap
    let request_times = Arc::new(RwLock::new(HashMap::with_capacity(16))); // 용량 미리 할당
    
    // HTTP 요청 감지 상태
    let parsing_request = Arc::new(RwLock::new(false));
    let current_request_id = Arc::new(RwLock::new(0_u64));
    
    // 바이트 카운터 초기화
    let client_to_server = {
        let request_times = Arc::clone(&request_times);
        let parsing_request = Arc::clone(&parsing_request);
        let current_request_id = Arc::clone(&current_request_id);
        let metrics_clone = Arc::clone(&metrics);
        let client_ip = client_ip_clone.clone();
        let server_ip = server_ip_clone.clone();
        let logger_clone = logger.clone();
        let session_id_str = session_id.to_string();
        let host_str = host.to_string();
        
        async move {
            let mut total_bytes = 0u64;
            // config에서 buffer_size 가져오기
            let buffer_size = config.as_ref()
                .map(|c| c.buffer_size)
                .unwrap_or(constants::BUFFER_SIZE_MEDIUM);
                
            let mut req_buffer = BytesMut::with_capacity(buffer_size);
            
            // 패턴 검색기 초기화 - 각 클로저에서 별도로 생성
            let header_searcher = TwoWaySearcher::new(HEADER_END_PATTERN);
            
            // 버퍼 재사용을 위한 초기화
            let mut buffer = BytesMut::with_capacity(BUFFER_SIZE_MEDIUM);
            
            loop {
                buffer.clear(); // 버퍼 재사용 
                
                match client_read.read_buf(&mut buffer).await {
                    Ok(0) => break, // 연결 종료
                    Ok(n) => {
                        // 요청 버퍼가 비어있고 새로운 요청이 시작되는 경우
                        if !*parsing_request.read().unwrap() && !buffer.is_empty() {
                            let (method, path, header_str, body) = parse_http_request(&buffer, &header_searcher);
                            
                            if let Some(method_str) = method {
                                if HTTP_METHODS.contains(&method_str) {
                                    // 새 요청 ID 할당 및 시작 시간 기록
                                    let request_id = {
                                        let mut req_id = current_request_id.write().unwrap();
                                        *req_id += 1;
                                        *req_id
                                    };
                                    
                                    // 요청 시작 시간 기록
                                    {
                                        request_times.write().unwrap().insert(request_id, Instant::now());
                                    }
                                    
                                    {
                                        *parsing_request.write().unwrap() = true;
                                    }
                                    
                                    debug!("[Session:{}] 새 HTTPS 요청 #{} 감지: {} {}", 
                                          session_id_str, request_id, method_str, path.unwrap_or(""));

                                    // DB에 요청 로깅
                                    if let Some(logger) = &logger_clone {
                                        if let Err(e) = logger.log_request(
                                            host_str.clone(),
                                            method_str.to_string(),
                                            path.unwrap_or("/").to_string(),
                                            header_str,
                                            body,
                                            session_id_str.clone(),
                                            client_ip.clone(),
                                            server_ip.clone(),
                                            false, // 차단되지 않음
                                            true   // TLS 요청
                                        ).await {
                                            warn!("[Session:{}] HTTPS 요청 로깅 실패: {}", session_id_str, e);
                                        } else {
                                            debug!("[Session:{}] HTTPS 요청 로깅 성공", session_id_str);
                                        }
                                    }
                                    
                                    // 요청 버퍼 초기화
                                    req_buffer.clear();
                                    req_buffer.put_slice(&buffer);
                                }
                            }
                        } else if *parsing_request.read().unwrap() {
                            // 기존 요청에 데이터 추가
                            req_buffer.put_slice(&buffer);
                            
                            // 요청 완료 여부 확인 (헤더 끝 확인)
                            if let Some(header_end_pos) = header_searcher.search_in(&req_buffer) {
                                // Content-Length 확인
                                let mut headers = [httparse::EMPTY_HEADER; 64];
                                let mut req = httparse::Request::new(&mut headers);
                                
                                if let Ok(_) = req.parse(&req_buffer[..header_end_pos]) {
                                    let mut content_length = None;
                                    
                                    for header in headers.iter() {
                                        if header.name.is_empty() {
                                            break;
                                        }
                                        
                                        if header.name.eq_ignore_ascii_case("content-length") {
                                            if let Ok(len_str) = std::str::from_utf8(header.value) {
                                                if let Ok(len) = len_str.trim().parse::<usize>() {
                                                    content_length = Some(len);
                                                }
                                            }
                                        }
                                    }
                                    
                                    // 요청 본문 길이 확인
                                    if let Some(len) = content_length {
                                        let body_length = req_buffer.len().saturating_sub(header_end_pos + 4);
                                        if body_length >= len {
                                            *parsing_request.write().unwrap() = false;
                                        }
                                    } else {
                                        // Content-Length가 없으면 헤더 끝으로 요청 완료로 간주
                                        *parsing_request.write().unwrap() = false;
                                    }
                                }
                            }
                        }
                        
                        // 서버로 데이터 전송
                        if let Err(e) = server_write.write_all(&buffer).await {
                            error!("[Session:{}] 서버 쓰기 오류: {}", session_id_str, e);
                            return Err(e.into());
                        }
                        
                        total_bytes += n as u64;
                        metrics_clone.add_tls_bytes_in(n as u64);
                    },
                    Err(e) => {
                        if e.kind() == io::ErrorKind::UnexpectedEof {
                            debug!("[Session:{}] 클라이언트 연결 종료", session_id_str);
                        } else {
                            error!("[Session:{}] 클라이언트 읽기 오류: {}", session_id_str, e);
                        }
                        break;
                    }
                }
            }
            
            debug!("[Session:{}] 클라이언트→서버 전송 완료: {} 바이트", session_id_str, total_bytes);
            
            // 서버 쓰기 스트림 종료
            let _ = server_write.shutdown().await;
            
            Ok::<_, Box<dyn Error + Send + Sync>>(())
        }
    };
    
    let server_to_client = {
        let request_times = Arc::clone(&request_times);
        let current_request_id = Arc::clone(&current_request_id);
        let metrics_clone = Arc::clone(&metrics);
        let session_id_str = session_id.to_string();
        let logger_clone = logger.clone();
        
        async move {
            let mut total_bytes = 0u64;
            // config에서 buffer_size 가져오기
            let buffer_size = config.as_ref()
                .map(|c| c.buffer_size)
                .unwrap_or(constants::BUFFER_SIZE_MEDIUM);
                
            let mut resp_buffer = BytesMut::with_capacity(buffer_size);
            let mut current_resp_id = 0u64;
            
            // 패턴 검색기 초기화
            let header_searcher = TwoWaySearcher::new(HEADER_END_PATTERN);
            let chunk_searcher = TwoWaySearcher::new(CHUNK_END_PATTERN);
            
            // 버퍼 재사용을 위한 초기화
            let mut buffer = BytesMut::with_capacity(BUFFER_SIZE_MEDIUM);
            
            loop {
                buffer.clear(); // 버퍼 재사용
                
                match server_read.read_buf(&mut buffer).await {
                    Ok(0) => break, // 연결 종료
                    Ok(n) => {
                        // 응답 버퍼가 비어있고 새로운 응답이 시작되는 경우
                        if resp_buffer.is_empty() && !buffer.is_empty() {
                            // 새 응답 처리 시작
                            current_resp_id = *current_request_id.read().unwrap();
                            resp_buffer.put_slice(&buffer);
                            
                            debug!("[Session:{}] 새 HTTPS 응답 #{} 시작", session_id_str, current_resp_id);
                        } else {
                            // 기존 응답에 데이터 추가
                            resp_buffer.put_slice(&buffer);
                        }
                        
                        // 응답 헤더 끝 위치 확인
                        if let Some(headers_end_pos) = header_searcher.search_in(&resp_buffer) {
                            // 응답 완료 여부 확인
                            let (is_complete, _content_length, _is_chunked) = 
                                is_response_complete(&resp_buffer, headers_end_pos, &chunk_searcher);
                            
                            // 응답 완료 시 처리
                            if is_complete {
                                // 응답 시간 계산
                                let start_time_opt = {
                                    request_times.write().unwrap().remove(&current_resp_id)
                                };
                                
                                if let Some(start_time) = start_time_opt {
                                    let response_time = start_time.elapsed().as_millis() as u64;
                                    
                                    // 상태 코드 추출
                                    let mut status_code = 200;
                                    if let Ok(status_line) = std::str::from_utf8(&resp_buffer[..headers_end_pos]) {
                                        if let Some(first_line) = status_line.lines().next() {
                                            if let Some(code_str) = first_line.split_whitespace().nth(1) {
                                                if let Ok(code) = code_str.parse::<u16>() {
                                                    status_code = code;
                                                }
                                            }
                                        }
                                    }
                                    
                                    // 헤더 추출
                                    let headers = if let Ok(headers_text) = std::str::from_utf8(&resp_buffer[..headers_end_pos]) {
                                        headers_text.to_string()
                                    } else {
                                        String::from_utf8_lossy(&resp_buffer[..headers_end_pos]).into_owned()
                                    };
                                    
                                    // 응답 본문 미리보기 (최대 1KB)
                                    let body_preview = if resp_buffer.len() > headers_end_pos + 4 {
                                        let preview_end = std::cmp::min(headers_end_pos + 4 + 1024, resp_buffer.len());
                                        let body_slice = &resp_buffer[headers_end_pos + 4..preview_end];
                                        
                                        if let Ok(body_text) = std::str::from_utf8(body_slice) {
                                            Some(LogFormatter::summarize_body(body_text, 1024))
                                        } else {
                                            // 바이너리 데이터를 base64로 인코딩
                                            let base64_data = base64::encode(body_slice);
                                            Some(LogFormatter::summarize_body(&base64_data, 1024))
                                        }
                                    } else {
                                        None
                                    };
                                    
                                    // 응답 로그 저장
                                    if let Some(logger) = &logger_clone {
                                        if let Err(e) = logger.log_response(
                                            session_id_str.clone(),
                                            status_code,
                                            response_time,
                                            resp_buffer.len(),
                                            headers,
                                            body_preview
                                        ).await {
                                            warn!("[Session:{}] HTTPS 응답 로깅 실패: {}", session_id_str, e);
                                        } else {
                                            debug!("[Session:{}] HTTPS 응답 로깅 성공: {} ms, {} bytes", 
                                                session_id_str, response_time, resp_buffer.len());
                                        }
                                    }
                                    
                                    info!("[Session:{}] HTTPS 응답 #{} 완료: {} ms, {} 바이트, 상태 코드: {}", 
                                         session_id_str, current_resp_id, response_time, resp_buffer.len(), status_code);
                                }
                                
                                // 응답 버퍼 초기화
                                resp_buffer.clear();
                            }
                        }
                        
                        // 클라이언트에 데이터 전송
                        if let Err(e) = client_write.write_all(&buffer).await {
                            error!("[Session:{}] 클라이언트 쓰기 오류: {}", session_id_str, e);
                            return Err(e.into());
                        }
                        
                        total_bytes += n as u64;
                        metrics_clone.add_tls_bytes_out(n as u64);
                    },
                    Err(e) => {
                        if e.kind() == io::ErrorKind::UnexpectedEof {
                            debug!("[Session:{}] 서버 연결 종료", session_id_str);
                        } else {
                            error!("[Session:{}] 서버 읽기 오류: {}", session_id_str, e);
                        }
                        break;
                    }
                }
            }
            
            debug!("[Session:{}] 서버→클라이언트 전송 완료: {} 바이트", session_id_str, total_bytes);
            
            // 클라이언트 쓰기 스트림 종료
            let _ = client_write.shutdown().await;
            
            Ok::<_, Box<dyn Error + Send + Sync>>(())
        }
    };
    
    // 양방향 프록시 실행
    let (client_result, server_result) = tokio::join!(client_to_server, server_to_client);
    
    // 전체 응답 시간 계산 및 로깅
    let total_response_time = request_start_time.elapsed().as_millis() as u64;
    info!("[Session:{}] TLS 프록시 완료: {} ms", session_id, total_response_time);
    
    // 에러 처리 - 둘 중 하나라도 에러가 있으면 반환
    if let Err(e) = client_result {
        return Err(e);
    }
    if let Err(e) = server_result {
        return Err(e);
    }
    
    Ok(())
} 